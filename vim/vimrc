set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)

Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'tomasr/molokai'
Plugin 'gerw/vim-latex-suite' 
"Plugin 'altercation/vim-colors-solarized'
Plugin 'preservim/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'preservim/nerdcommenter' 
Plugin 'tpope/vim-surround'
Bundle 'WolfgangMehner/c-support'
Bundle 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Set Line Numbering
set nu

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Ctrl-j/k deletes blank line below/above, and Alt-j/k inserts.
nnoremap <silent><C-j> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent><C-k> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent>^[j :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent>^[k :set paste<CR>m`O<Esc>``:set nopaste<CR>

" single replace with control + i
nnoremap <C-i> i_<Esc>r

" delete to the end of the word
inoremap <C-H> <C-W>

" automatically close brackets and quotes in insert mode
:inoremap ( ()<Esc>i
:inoremap { {}<Esc>i
:inoremap [ []<Esc>i

:inoremap " ""<Esc>i
:inoremap ' ''<Esc>i

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" Set UTF-8 Support
set encoding=utf-8

" Set the PEP 8 indentation
au BufNewFile,BufRead *.py;
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix | 


" Flag Unnecessary Whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Show column 80
highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn=join(range(81,999),",")

" Added for ycm to remove window when done
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" map ii to the escape key for returning to normal
inoremap ii <Esc>

" map hh to left and ll to right in insert mode
inoremap jj <Left>
inoremap ;; <Right>

" Virtualenv support
py3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  exec(compile(open(activate_this, "rb").read(), activate_this, 'exec'), dict(__file__=activate_this))
EOF

" Nerdtree Settings
set rtp+=~/.vim/bundle/nerdtree

"ignore files in NERDTree
let NERDTreeIgnore = ['\.pyc$', '__pycache__', '\.git','\~$']

" change cwd to nerdtree root
let NERDTreeChDirMode = 2

" Nerdtree auto open in directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Aesthetics
let python_highlight_all=1
syntax on

if has('gui_running')
  set background=dark
  colorscheme molokai
else
  colorscheme atom-dark-256
endif

